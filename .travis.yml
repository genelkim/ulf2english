language: python
python:
  - '2.7'
  - '3.6'
  - '3.7'

env:
  matrix:
    - LISP=sbcl COVERALLS=true
    - LISP=sbcl32
    - LISP=allegro
    - LISP=allegromodern
    - LISP=abcl
    - LISP=ccl
    - LISP=ccl32
    - LISP=clisp
    - LISP=clisp32
    - LISP=cmucl
    - LISP=ecl

matrix:
  allow_failures:
    # Only plan to support 64-bit SBCL, but check compatilibity issues on other
    # distributions.
    - env: LISP=sbcl32
    - env: LISP=allegro
    - env: LISP=allegromodern
    - env: LISP=abcl
    - env: LISP=ccl
    - env: LISP=ccl32
    - env: LISP=clisp
    - env: LISP=clisp32
    - env: LISP=ecl
    - env: LISP=cmucl

addons:
  apt:
    packages:
      - libssl-dev

install:
  #
  # Install lisp environment.
  #
  - ./script/cl_travis_install.sh
  - ./script/install_lisp_dependencies.sh  
 
  #
  # Install conda-based python environment.
  #
  - sudo apt update
  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  - if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
      wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh;
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - source "$HOME/miniconda/etc/profile.d/conda.sh"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a # Useful for debugging any issues with conda
  - conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION
  - conda activate test-environment
 
  # Install python dependences
  - if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
      ./script/install-pattern-en.sh;
    else
      pip install pattern;
    fi
  - mkdir -p /tmp
  - chmod a+rwx /tmp

#before_script:
#  - if [[ "$LISP" == "sbcl" ]]; then
#      cl -e '(ql:quickload :cl-coveralls)';
#    fi

script:
  - if [[ "$LISP" == "sbcl" ]]; then
      sbcl --load run-coveralls.lisp;
    else
      cl -e '(load "runtest")';
    fi
#cl -f run-coveralls.lisp
#cl -e '(ql:quickload :cl-coveralls)
#       (coveralls:with-coveralls ()
#         (load "runtest"))';

